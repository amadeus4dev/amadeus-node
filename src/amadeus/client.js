import Validator   from './client/validator';
import AccessToken from './client/access_token';
import Request     from './client/request';

/**
 * A client allowing to make generic authenticated HTTP calls
 *
 * @param  {Object} options a list of options. See {@link Amadeus} .
 * @property {string} clientId the API key used to authenticate the API
 * @property {string} clientSecret the API secret used to authenticate
 *  the API
 * @property {Object} logger the `console`-compatible logger used to debug calls
 * @property {string} host the hostname of the server API calls are made to
 * @property {string} customAppId the custom App ID to be passed in the User
 *  Agent to the server
 * @property {string} customAppVersion the custom App Version number to be
 *  passed in the User Agent to the server
 * @property {Object} http the Node/HTTPS-compatible client used to make
 *  requests
 */
class Client {
  constructor(options = {}) {
    new Validator().validateAndInitialize(this, options);
    this.accessToken = new AccessToken(this);
    this.Request = Request;
  }

  /**
   * Make an authenticated GET API call
   *
   * @param  {string} path the full path to call
   * @param  {Object} [params={}] the query string parameters
   * @return {Promise.<Response,ResponseError>} a Bluebird Promise
   */
  get(path, params = {}) {
    return this.accessToken.bearerToken().then((bearerToken) => {
      return this.call('GET', path, params, bearerToken);
    });
  }

  /**
  * Make an authenticated POST API call
   *
   * @param  {string} path the full path to call
   * @param  {Object} [params={}] the POST parameters
   * @return {Promise.<Response,ResponseError>} a Bluebird Promise
   */
  post(path, params = {}) {
    return this.accessToken.bearerToken().then((bearerToken) => {
      return this.call('POST', path, params, bearerToken);
    });
  }

  /**
   * Make an unauthenticated POST API call. Generally used to get an
   *  AccessToken.
   *
   * @param  {string} path the full path to call
   * @param  {Object} [params={}] the query string parameters
   * @return {Promise.<Response,ResponseError>} a Bluebird Promise
   * @protected
   */
  unauthenticatedPost(path, params = {}) {
    return this.call('POST', path, params);
  }

  // PRIVATE

  /**
   * Make any kind of API call
   *
   * @param  {string} verb the HTTP method, for example `GET` or `POST`
   * @param  {string} path the full path to call
   * @param  {Object} params the parameters to pass in the query or body
   * @param  {string} [bearerToken=null] the full BearerToken as generated by the
   *  AccessToken class
   * @return {Promise.<Response,ResponseError>} a Bluebird Promise
   * @private
   */
  call(verb, path, params, bearerToken = null) {
    return new this.Request(this, verb, path, params, bearerToken).call();
  }
}

export default Client;
