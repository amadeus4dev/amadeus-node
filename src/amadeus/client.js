import Validator   from './client/validator';
import AccessToken from './client/access_token';
import Request     from './client/request';

import pkg         from '../../package.json';

/**
 * A helper module for making generic API calls. It is used by
 * every namespaced API method.
 *
 * It can be accessed through the amadeus object directly, or inderectly through
 * any of its namespaced methods.
 *
 * ```js
 * amadeus.client.get(path, params) //direct
 * amadeus.amadeus.reference_data.urls.checkin_links.get(params) //indirect
 * ```
 *
 * @param {Object} options a list of options. See {@link Amadeus} .
 * @property {string} clientId the API key used to authenticate the API
 * @property {string} clientSecret the API secret used to authenticate
 *  the API
 * @property {Object} logger the `console`-compatible logger used to debug calls
 * @property {string} host the hostname of the server API calls are made to
 * @property {string} customAppId the custom App ID to be passed in the User
 *  Agent to the server
 * @property {string} customAppVersion the custom App Version number to be
 *  passed in the User Agent to the server
 * @property {Object} http the Node/HTTPS-compatible client used to make
 *  requests
 * @property {number} version The version of this API client
 */
class Client {
  constructor(options = {}) {
    new Validator().validateAndInitialize(this, options);
    this.accessToken = new AccessToken(this);
    this.Request = Request;
    this.version = pkg.version;
  }

  /**
   * A helper module for making generic GET requests calls. It is used by
   * every namespaced API GET method.
   *
   * ```js
   * amadeus.foo.bar.get({ some: 'data' });
   * ```
   *
   * It can be used to make any generic API call that is automatically
   * authenticated using your API credentials:
   *
   * ```js
   * amadeus.client.get('/v2/foo/bar', { some: 'data' });
   * ```
   *
   * @param {string} path the full path to call
   * @param {Object} [params={}] the query string parameters
   * @return {Promise.<Response,ResponseError>} a Bluebird Promise
   */
  get(path, params = {}) {
    return this.accessToken.bearerToken(this).then((bearerToken) => {
      return this.call('GET', path, params, bearerToken);
    });
  }

  /**
   * A helper module for making generic POST requests calls. It is used by
   * every namespaced API POST method.
   *
   * ```js
   * amadeus.foo.bar.post({ some: 'data' });
   * ```
   *
   * It can be used to make any generic API call that is automatically
   * authenticated using your API credentials:
   *
   * ```js
   * amadeus.client.post('/v2/foo/bar', { some: 'data' });
   * ```
   *
   * @param {string} path the full path to call
   * @param {Object} [params={}] the POST parameters
   * @return {Promise.<Response,ResponseError>} a Bluebird Promise
   */
  post(path, params = {}) {
    return this.accessToken.bearerToken(this).then((bearerToken) => {
      return this.call('POST', path, params, bearerToken);
    });
  }

  /**
   * Make an unauthenticated POST API call. Generally used to get an
   *  AccessToken.
   *
   * @param {string} path the full path to call
   * @param {Object} [params={}] the query string parameters
   * @return {Promise.<Response,ResponseError>} a Bluebird Promise
   * @protected
   */
  unauthenticatedPost(path, params = {}) {
    return this.call('POST', path, params);
  }

  // PRIVATE

  /**
   * Make any kind of API call
   *
   * @param {string} verb the HTTP method, for example `GET` or `POST`
   * @param {string} path the full path to call
   * @param {Object} params the parameters to pass in the query or body
   * @param {string} [bearerToken=null] the full BearerToken as generated by the
   *  AccessToken class
   * @return {Promise.<Response,ResponseError>} a Bluebird Promise
   * @private
   */
  call(verb, path, params, bearerToken = null) {
    return new this.Request(verb, path, params, bearerToken).call(this);
  }
}

export default Client;
